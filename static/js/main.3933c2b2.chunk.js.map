{"version":3,"sources":["components/PostsList/PostsList.jsx","components/NewCommentForm/NewCommentForm.jsx","api/comments.js","api/posts.js","components/PostDetails/PostDetails.jsx","App.jsx","index.js"],"names":["PostsList","postIsOpened","activePostId","handleClick","posts","className","map","post","key","id","userId","title","type","onClick","defaultProps","NewCommentForm","postId","createComment","useState","name","setName","email","setEmail","body","setBody","onSubmit","event","preventDefault","placeholder","value","onChange","target","COMMENTS_URL","getPostComments","a","comments","fetch","then","promise","json","result","data","filter","comment","POSTS_URL","getUserPosts","getPostDetails","PostDetails","addPost","addComments","visibleComments","changeVisibleOfComments","useEffect","postfromServer","commentsfromServer","fetchPostDetails","deleteComment","commentId","method","removePostComment","length","newComment","headers","JSON","stringify","addPostComment","App","selectedPostId","setPostId","postIdCheck","updatepostIdCheck","selectedUserId","setUserId","updatePosts","fetchPosts","action","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.3933c2b2.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport './PostsList.scss';\n\nexport const PostsList = ({\n  postIsOpened,\n  activePostId,\n  handleClick,\n  posts,\n}) => (\n  <div className=\"PostsList\">\n    <h2>Posts:</h2>\n    <div>\n      <ul className=\"PostsList__list\">\n        {posts.map(post => (\n          <li\n            key={post.id}\n            className=\"PostsList__item\"\n          >\n            <div>\n              <b>{`[User #${post.userId}]`}</b>\n              {post.title}\n            </div>\n            {postIsOpened && post.id === activePostId\n              ? (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleClick(post.id, 'Close')}\n                >\n                  Close\n                </button>\n              )\n              : (\n                <button\n                  type=\"button\"\n                  className=\"PostsList__button button\"\n                  onClick={() => handleClick(post.id, 'Open')}\n                >\n                  Open\n                </button>\n              )}\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n);\n\nPostsList.propTypes = {\n  postIsOpened: PropTypes.bool.isRequired,\n  activePostId: PropTypes.number.isRequired,\n  handleClick: PropTypes.func.isRequired,\n\n  posts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      userId: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      body: PropTypes.string.isRequired,\n      createdAt: PropTypes.string.isRequired,\n      updatedAt: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nPostsList.defaultProps = {\n  posts: [],\n};\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './NewCommentForm.scss';\n\nexport const NewCommentForm = ({ postId, createComment }) => {\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [body, setBody] = useState('');\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n\n    createComment({\n      postId,\n      name,\n      email,\n      body,\n    });\n\n    setName('');\n    setEmail('');\n    setBody('');\n  };\n\n  return (\n    <form\n      className=\"NewCommentForm\"\n      onSubmit={handleSubmit}\n    >\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"name\"\n          placeholder=\"Your name\"\n          className=\"NewCommentForm__input\"\n          value={name}\n          onChange={event => setName(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <input\n          type=\"text\"\n          name=\"email\"\n          placeholder=\"Your email\"\n          className=\"NewCommentForm__input\"\n          value={email}\n          onChange={event => setEmail(event.target.value)}\n        />\n      </div>\n\n      <div className=\"form-field\">\n        <textarea\n          name=\"body\"\n          placeholder=\"Type comment here\"\n          className=\"NewCommentForm__input\"\n          value={body}\n          onChange={event => setBody(event.target.value)}\n        />\n      </div>\n\n      <button\n        type=\"submit\"\n        className=\"NewCommentForm__submit-button button\"\n      >\n        Add a comment\n      </button>\n    </form>\n  );\n};\n\nNewCommentForm.propTypes = {\n  postId: PropTypes.number.isRequired,\n  createComment: PropTypes.func.isRequired,\n};\n","const COMMENTS_URL = 'https://mate-api.herokuapp.com/comments';\n\nexport const getPostComments = async(postId) => {\n  const comments = fetch(`${COMMENTS_URL}`)\n    .then(promise => promise.json())\n    .then(result => result.data.filter(comment => comment.postId === postId));\n\n  return comments;\n};\n\nexport const removePostComment = (commentId) => {\n  const comments = fetch(`${COMMENTS_URL}/${commentId}`, { method: 'DELETE' })\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return comments;\n};\n\nexport const addPostComment = (newComment) => {\n  const comments = fetch(`${COMMENTS_URL}`, {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(newComment),\n  })\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return comments;\n};\n","const POSTS_URL = 'https://mate-api.herokuapp.com/posts';\n\nexport const getUserPosts = async(userId) => {\n  const posts = fetch(`${POSTS_URL}`)\n    .then(promise => promise.json())\n    .then(result => (userId\n      ? result.data.filter(post => post.userId === userId)\n      : result.data));\n\n  return posts;\n};\n\nexport const getPostDetails = (postId) => {\n  const posts = fetch(`${POSTS_URL}/${postId}`)\n    .then(promise => promise.json())\n    .then(result => result.data);\n\n  return posts;\n};\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { NewCommentForm } from '../NewCommentForm';\nimport './PostDetails.scss';\nimport {\n  getPostComments,\n  removePostComment,\n  addPostComment,\n} from '../../api/comments';\nimport { getPostDetails } from '../../api/posts';\n\nexport const PostDetails = ({ postId }) => {\n  const [post, addPost] = useState([]);\n  const [comments, addComments] = useState([]);\n  const [visibleComments, changeVisibleOfComments] = useState(true);\n\n  useEffect(() => {\n    const fetchPostDetails = async() => {\n      const postfromServer = await getPostDetails(postId);\n      const commentsfromServer = await getPostComments(postId);\n\n      addPost(postfromServer);\n      addComments(commentsfromServer);\n    };\n\n    fetchPostDetails();\n  }, [postId]);\n\n  const changeVisible = () => {\n    changeVisibleOfComments(!visibleComments);\n  };\n\n  const deleteComment = (commentId) => {\n    removePostComment(commentId)\n      .then(() => getPostComments(postId))\n      .then(result => addComments(result));\n  };\n\n  const updateComments = (newComment) => {\n    addPostComment(newComment)\n      .then(() => getPostComments(postId))\n      .then(result => addComments(result));\n  };\n\n  return (\n    <div className=\"PostDetails\">\n      <h2>Post details:</h2>\n\n      <section className=\"PostDetails__post\">\n        <p>{post.title}</p>\n      </section>\n      <section className=\"PostDetails__comments\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={() => changeVisible()}\n        >\n          {visibleComments ? `Hide` : 'Show'}\n          {` ${comments.length} comments`}\n        </button>\n\n        {visibleComments && (\n          <ul className=\"PostDetails__list\">\n            {comments.length > 0 && comments.map(comment => (\n              <li\n                className=\"PostDetails__list-item\"\n                key={comment.id}\n              >\n                <button\n                  type=\"button\"\n                  className=\"PostDetails__remove-button button\"\n                  onClick={() => deleteComment(comment.id)}\n                >\n                  X\n                </button>\n                <p>{comment.name}</p>\n              </li>\n            ))}\n          </ul>\n        )}\n      </section>\n\n      <section>\n        <div className=\"PostDetails__form-wrapper\">\n          <NewCommentForm\n            createComment={updateComments}\n            postId={postId}\n          />\n        </div>\n      </section>\n    </div>\n  );\n};\n\nPostDetails.propTypes = {\n  postId: PropTypes.number.isRequired,\n};\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { PostsList } from './components/PostsList';\nimport { PostDetails } from './components/PostDetails';\nimport { getUserPosts } from './api/posts';\n\nconst App = () => {\n  const [selectedPostId, setPostId] = useState(0);\n  const [postIdCheck, updatepostIdCheck] = useState(false);\n  const [selectedUserId, setUserId] = useState(0);\n  const [posts, updatePosts] = useState([]);\n\n  useEffect(() => {\n    const fetchPosts = async() => {\n      const result = await getUserPosts(selectedUserId);\n\n      updatePosts(result);\n    };\n\n    fetchPosts();\n  }, [selectedUserId]);\n\n  const handleClick = (postId, action) => {\n    switch (action) {\n      case 'Open':\n        setPostId(postId);\n        updatepostIdCheck(true);\n        break;\n      case 'Close':\n        setPostId(0);\n        updatepostIdCheck(false);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App__header\">\n        <label>\n          Select a user: &nbsp;\n\n          <select\n            className=\"App__user-selector\"\n            onChange={event => setUserId(+event.target.value)}\n          >\n            <option value=\"0\">All users</option>\n            <option value=\"1\">Leanne Graham</option>\n            <option value=\"2\">Ervin Howell</option>\n            <option value=\"3\">Clementine Bauch</option>\n            <option value=\"4\">Patricia Lebsack</option>\n            <option value=\"5\">Chelsey Dietrich</option>\n            <option value=\"6\">Mrs. Dennis Schulist</option>\n            <option value=\"7\">Kurtis Weissnat</option>\n            <option value=\"8\">Nicholas Runolfsdottir V</option>\n            <option value=\"9\">Glenna Reichert</option>\n            <option value=\"10\">Leanne Graham</option>\n          </select>\n        </label>\n      </header>\n\n      <main className=\"App__main\">\n        <div className=\"App__sidebar\">\n          <PostsList\n            handleClick={handleClick}\n            postIsOpened={postIdCheck}\n            activePostId={selectedPostId}\n            posts={posts}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          {postIdCheck && (\n            <PostDetails\n              selectedUserId={selectedUserId}\n              postId={selectedPostId}\n            />\n          )}\n        </div>\n      </main>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}